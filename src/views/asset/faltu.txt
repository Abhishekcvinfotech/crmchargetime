<td className={`td_style td_style_${ind}`}>
                            {item.pwa_name === null ? (
                              csvData.map((itm, ind) => {
                                IdForCsvData = itm.device_address_id
                                nm = IdForCsvData === IdForCurrentPost ? itm.customer_name : ''
                                console.log(nm, 'num')
                                return (
                                  <div key={ind}>
                                    <p>{nm}</p>
                                  </div>
                                )
                              })
                            ) : (
                              <Select
                                showSearch
                                style={{
                                  width: 150,
                                }}
                                value={
                                  item.pwa_name !== null
                                    ? item.pwa_name
                                    : `td_style_${ind}` === autoFillIndex
                                    ? autoFillCustomerName
                                    : ''
                                }
                                placeholder="Search to Select"
                                optionFilterProp="children"
                                onChange={(value, e) => selectCustomerName(value, ind, e)}
                                filterOption={(input, option) =>
                                  (option?.label ?? '').includes(input)
                                }
                                filterSort={(optionA, optionB) =>
                                  (optionA?.label ?? '')
                                    .toLowerCase()
                                    .localeCompare((optionB?.label ?? '').toLowerCase())
                                }
                                options={(loopingCustomerName || []).map((d) => ({
                                  value: d.id,
                                  label: d.pwa_name,
                                }))}
                              />
                            )}
                          </td>


                          style={
                                     nm !== ''
                                        ? { display: 'block' }
                                        : autoFillCustomerName !== null &&
                                          `td_style_${ind}` === autoFillIndex
                                        ? { display: 'block' }
                                        : { display: 'none' }
                                    }













                                    import React, { useState, useEffect, useRef } from 'react'
import {
  Button,
  Spin,
  message,
  Space,
  Select,
  Switch,
  Modal,
  Pagination,
  Radio,
  Popconfirm,
  Checkbox,
  notification,
} from 'antd'
import { UserAddOutlined, DeleteOutlined, FlagTwoTone } from '@ant-design/icons'
import { troesAPi } from '../../api'
import axios from 'axios'
import refresh from '../../assets/images/refresh.svg'
import check_sign from '../../assets/images/check_sign.svg'
import './AssetTwo.css'
import import_one from '../../assets/images/import_one.svg'

const AssetTwo = () => {
  //condition for assigned start
  const [conditionAssigned, setConditionAssigned] = useState(false)
  //condition for assigned end
  //all map method data state start
  const [allllAssetDataInTable, setAllAssetDataInTable] = useState([])
  const [deviceAddressOption, setDeviceAddressOption] = useState([])

  //all map method data state end

  //when we click on device address all data should populated start

  const [selectedDeviceAddress, setselectedDeviceAddress] = useState('')
  const [autoFillState, setAutoFillState] = useState('')
  const [autoFillZip, setAutoFillZip] = useState('')
  const [autoFillInstallation, setAutoFillInstallation] = useState('')
  const [autoFillPartner, setAutoFillPartner] = useState('')
  const [autoFillCustomerName, setAutoFillCustomerName] = useState('')
  const [autoFillCustomerPhone, setAutoFillCustomerPhone] = useState('')
  const [autoFillCustomerEmail, setAutoFillCustomerEmail] = useState('')
  const [autoFillCustomerUnitState, setAutoFillCustomerUnitState] = useState('')
  const [autoFillIndex, setAutoFillIndex] = useState('')
  const [deviceAddressId, setDeviceAddressId] = useState('')
  const [custId, setCustId] = useState('')
  const [flag_status, setFlagStatus] = useState('')
  //when we click on device address all data should populated end

  // when We have to assign on the basis of map method start
  // const [deviceId, setDeviceId] = useState('')
  // const [uniqueId, setUniqueId] = useState('')
  // const [device_address, setDeviceAddress] = useState('')
  // const [device_state, setDeviceState] = useState('')
  // const [device_zip, setDeviceZip] = useState('')

  const [partner, setPartner] = useState('')
  const [addingClass, setAddingClass] = useState('')
  const [forTrue, setForTrue] = useState(true)
  const [forDataOfPartial, setForDataOfPartial] = useState([])
  console.log(forDataOfPartial, 'object')

  // when We have to assign on the basis of map method end

  // when partial match happens start

  const [loopingCustomerName, setLoopingCustomerName] = useState([])

  // when partial match happens end

  // state for pagination start

  const [page, setPage] = useState(1)
  const [postPerPage, setPostPerPage] = useState(5)
  const [total, setTotal] = useState()
  const [forIndexing, setForIndexing] = useState('')

  // state for pagination end

  // Basic Modal start

  const [userDelete, setUserDelete] = useState(false)
  const [disabled, setDisabled] = useState(false)
  const [status, setStatus] = useState('')
  const [id, setId] = useState('')
  const [isAssetsDelete, setisAssetsDelete] = useState(false)
  const [deleted, setDeleted] = useState(false)
  const [loading, setLoading] = useState(false)
  const [name, setName] = useState('')
  const inputRef = useRef(null)
  const [uploaded_file, setUploaded_file] = useState(null)
  const [bgColor, setBgColor] = useState(false)
  const [counter, setCounter] = useState(1)
  // Basic Modal end

  //  assigned button && unAssigned button start

  const [changBackgroundAll, setChangeBackgroundAll] = useState(true)
  const [changBackgroundAssigned, setChangeBackgroundAssigned] = useState(false)
  const [changBackgroundUnAssigned, setChangeBackgroundUnAssigned] = useState(false)
  // assigned button && unAssigned button end
  const [csvData, setCSvData] = useState([])

  const openNotification = () => {
    notification.open({
      // message: 'Notification Title',
      description: '✅ File uploaded successfully',
      onClick: () => {
        console.log('Notification Clicked!')
      },
    })
  }
  // csv wrong upload notification
  const openNotificationCsvWrong = () => {
    notification.open({
      description: '❌ Please upload a valid file format!!',
      onClick: () => {
        console.log('Notification Clicked!')
      },
    })
  }
  const getAllAssetsData = () => {
    axios
      .get(`${troesAPi}/devicedetails`)
      .then((res) => {
        let allData = res?.data
        setAllAssetDataInTable(res.data)
        setTotal(allData?.length)
        setForIndexing(allData?.length)
      })
      .catch((err) => {
        console.log(err)
      })
  }
  const selectDeviceAddress = () => {
    axios
      .get(`${troesAPi}/selectdeviceaddress`)
      .then((res) => {
        setDeviceAddressOption(res.data)
      })
      .catch((err) => {
        console.log(err)
      })
  }
  useEffect(() => {
    selectDeviceAddress()
  }, [])
  useEffect(() => {
    getAllAssetsData()
  }, [])

  const importCSVFunc = () => {
    axios
      .get(`${troesAPi}/csvdeviceaddress`)
      .then((res) => {
        console.log(res.data, 'res')
        setCSvData(res.data.user_data_exact)
        setForDataOfPartial(res.data.user_data_partial)
        setForTrue(true)
      })
      .catch((err) => {
        console.log(err)
      })
  }
  console.log(csvData, 'fff')
  const selectDeviceAddressFunction = (value, ind, e) => {
    let str = e.label

    let strData =
      str.substring(0, str.indexOf('(')) + str.substring(str.lastIndexOf(')') + 1, str.length)
    let addres_class = 'add_pclass'
    setselectedDeviceAddress(strData)
    setAddingClass('clickdata_yesm')
    setForTrue(false)
    setDeviceAddressId(value)

    setAutoFillIndex(`td_style_${ind}`, 'manish_class')
    setConditionAssigned(true)

    axios
      .get(`${troesAPi}/deviceaddress/${value}`)
      .then((res) => {
        setAutoFillState(res.data.location_details.state)
        setAutoFillZip(res.data.location_details.ZIP_code)
        setAutoFillInstallation(res.data.location_details.location)
        setAutoFillPartner(res.data.location_details.partner)
        if (!res.data.user_names) {
          setAutoFillCustomerName('')
          setAutoFillCustomerPhone('')
          setAutoFillCustomerEmail('')
          setCustId('')

          // forLooping customer name start
          setLoopingCustomerName('')

          // forLooping customer name end
        } else if (res.data.user_names[0].pwa_name && !res.data.user_names[0].pwa_mobile) {
          setAutoFillCustomerName('')
          setAutoFillCustomerPhone('')
          setAutoFillCustomerEmail('')
          setCustId('')
          setFlagStatus(1)
          setLoopingCustomerName(res.data.user_names)
        } else {
          setAutoFillCustomerName(res.data.user_names[0].pwa_name)
          setAutoFillCustomerPhone(res.data.user_names[0].pwa_mobile)
          setAutoFillCustomerEmail(res.data.user_names[0].pwa_email)
          setCustId(res.data.user_names[0].id)
          setFlagStatus(0)
          // forLooping customer name start
          setLoopingCustomerName(res.data.user_names)

          // forLooping customer name end
        }
      })
      .catch((err) => {
        console.log(err)
      })
  }

  const selectCustomerName = (value) => {
    axios
      .get(`${troesAPi}/customerdetails/${value}`)
      .then((res) => {
        setAutoFillCustomerName(res.data.pwa_name)
        setAutoFillCustomerPhone(res.data.pwa_mobile)
        setAutoFillCustomerEmail(res.data.pwa_email)
        setCustId(res.data.id)
      })
      .catch((err) => {
        console.log(err)
      })
  }

  const onChangeSwitch = (checked, ind, start) => {
    setAutoFillIndex(`td_style_${ind}`)
    setDisabled(!disabled)
    if (checked === true) {
      // setisAssetsShow(true)
      setStatus(1)
    } else {
      // setisAssetsShow(false)
      setStatus(0)
    }
  }
  const handleChange = (e, ind) => {
    setPartner(e.target.value)
  }
  const onChange = (value, ind, e) => {
    setAutoFillCustomerUnitState(e.label)
  }

  async function AssignedDataOnhandleSelect(id, deviceId, uniqueId) {
    setLoading(true)
    try {
      let result = await fetch(`${troesAPi}/assigndevice/${id}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },
        body: JSON.stringify({
          device_id: deviceId,
          unique_id: uniqueId,
          device_address: selectedDeviceAddress,
          partner: partner,
          cust_name: autoFillCustomerName,
          cust_email: autoFillCustomerEmail,
          cust_phone: autoFillCustomerPhone,
          device_state: autoFillState,
          device_zip: autoFillZip,
          installation: autoFillInstallation,
          deviceunit_state: autoFillCustomerUnitState,
          cust_id: custId,
          action: 1,
          status: 1,
          flag_status: flag_status,
        }),
      })
      await result.json()
      getAllAssetsData()
      setDeleted((data) => !data)
      if (result) {
        setDisabled(true)
      }
      setLoading(false)
    } catch (err) {
      setLoading(false)
      console.log(err)
    }
  }

  async function AssignedDataOnMapMethod(
    id,
    device_id,
    unique_id,
    device_address,
    device_state,
    device_zip,
    installation,
    partner,
    cust_name,
    cust_phone,
    cust_email,
    deviceunit_state,
  ) {
    setLoading(true)
    try {
      let result = await fetch(`${troesAPi}/assigndevice/${id}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },
        body: JSON.stringify({
          device_id: device_id,
          unique_id: unique_id,
          device_address: device_address,
          partner: partner,
          cust_name: cust_name,
          cust_email: cust_email,
          cust_phone: cust_phone,
          device_state: device_state,
          device_zip: device_zip,
          installation: installation,
          deviceunit_state: deviceunit_state,
          cust_id: custId,
          action: 1,
          status: 1,
          flag_status: flag_status,
        }),
      })
      await result.json()
      getAllAssetsData()
      setDeleted((data) => !data)
      if (result) {
        setDisabled(true)
      }
      setLoading(false)
    } catch (err) {
      console.log(err)
      setLoading(false)
    }
  }

  useEffect(() => {
    getAllAssetsData()
  }, [deleted])

  const cancel = (e) => {
    console.log(e)
  }
  async function unAssignedData(id, custIde) {
    setLoading(true)
    try {
      let result = await fetch(`${troesAPi}/unassigndevice/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },
        body: JSON.stringify({
          device_id: '',
          unique_id: '',
          device_address: '',
          partner: '',
          cust_name: '',
          cust_email: '',
          cust_phone: '',
          device_state: '',
          device_zip: '',
          installation: '',
          deviceunit_state: '',
          cust_id: custIde,
          action: '',
          status: '',
        }),
      })

      console.log(result, 'rr')
      if (result) {
        setAutoFillCustomerEmail('')
        setAutoFillCustomerName('')
        setAutoFillCustomerPhone('')
        setDisabled(false)
        getAllAssetsData()
        setLoading(false)
      }
    } catch (err) {
      console.log(err)
      setLoading(false)
    }
  }
  const openDeleteModal = () => {
    setisAssetsDelete((current) => !current)
  }
  const cancelDeleteAssets = () => {
    setisAssetsDelete((current) => !current)
  }
  const deleteAsseted = (id) => {
    setisAssetsDelete((current) => !current)
    setLoading(true)

    axios
      .delete(`${troesAPi}/devicedestroy/${id}`)
      .then((res) => {
        setDeleted((data) => !data)
        getAllAssetsData()
        setUserDelete(true)
        setLoading(false)
        setTimeout(() => {
          setUserDelete(false)
        }, 2000)
      })

      .catch((err) => {
        setLoading(true)
        console.log(err)
      })
  }

  const refreshAssetPage = () => {
    axios
      .get(`${troesAPi}/emporiadevice`)
      .then((res) => {
        alert(res.data.message)
        selectDeviceAddress()
        getAllAssetsData()
      })
      .catch((err) => {
        console.log(err)
      })
    setLoading(true)
    setTimeout(() => {
      setLoading(false)
    }, 1000)
  }

  // assigned button && unAssigned button start
  const handlePagination = (value) => {
    setPage(value)
  }
  const ButtonofAll = () => {
    setChangeBackgroundAll(true)
    setChangeBackgroundAssigned(false)
    setChangeBackgroundUnAssigned(false)
    handlePagination((value) => setPage(1))
    getAllAssetsData()
  }
  const ButtonofAssigned = () => {
    setChangeBackgroundAssigned(true)
    setChangeBackgroundUnAssigned(false)
    setChangeBackgroundAll(false)
    setLoading(true)
    axios
      .get(`${troesAPi}/getassigndevice`)
      .then((res) => {
        setLoading(false)

        setAllAssetDataInTable(res.data)
        handlePagination((value) => setPage(1))
      })
      .catch((err) => {
        console.log(err)
        setLoading(false)
      })
  }
  const ButtonofUnassigned = () => {
    setChangeBackgroundAssigned(false)
    setChangeBackgroundUnAssigned(true)
    setChangeBackgroundAll(false)
    setLoading(true)
    axios
      .get(`${troesAPi}/getunassigndevice`)
      .then((res) => {
        setAllAssetDataInTable(res.data)
        setLoading(false)
        handlePagination((value) => setPage(1))
      })
      .catch((err) => {
        setLoading(false)
        console.log(err)
      })
  }

  // assigned button && unAssigned button end

  // import csv start

  const handleFileChange = (event) => {
    setUploaded_file(event.target.files[0])
    setBgColor((data) => !data)
  }
  const filereplace = () => {
    setTimeout(() => {
      inputRef.current.value = null
    }, 2000)
  }

  const handleSubmit = (event) => {
    event.preventDefault()
    setCounter(counter + 1)
    const formData = new FormData()
    formData.append('uploaded_file', uploaded_file)

    for (var pair of formData.entries()) {
      console.log(`${pair[0]}: ${pair[1]}`)
    }
    if (uploaded_file !== null) {
      fetch(`${troesAPi}/importcsv`, {
        method: 'POST',
        mode: 'no-cors',
        headers: { 'content-type': 'application/json' },
        body: formData,
      })
        .then((response) => {
          response.json()
          getAllAssetsData()
        })
        .then((data, e) => {
          if (data) {
            setUploaded_file((e.target.files[0] = ''))
          }
        })
        .catch((err) => {
          console.error('Error:', err)
        })
      openNotification()
    } else {
      openNotificationCsvWrong()
    }
    filereplace()
  }
  //import csv end
  // pagination start
  const indexOfLastPage = page * postPerPage
  const indexOfFirstPage = indexOfLastPage - postPerPage
  const currentPosts =
    allllAssetDataInTable && allllAssetDataInTable.slice(indexOfFirstPage, indexOfLastPage)

  const onShowSizeChange = (current, pageSize) => {
    setPostPerPage(pageSize)
  }

  const itemRender = (current, type, originalElement) => {
    if (type === 'prev') {
      return <a>Previous</a>
    }
    if (type === 'next') {
      return <a>Next</a>
    }
    return originalElement
  }
  const handlePaginationOfAssets = (value) => {
    setPage(value)
  }
  const onChangeCheck = (checkedValues) => {
    console.log('checked = ', checkedValues)
  }
  const plainOptions = ['Apple', 'Pear', 'Orange']
  // const optioend = [
  //   {
  //     label: 'Apple',
  //     value: 'Apple',
  //   },
  //   {
  //     label: 'Pear',
  //     value: 'Pear',
  //   },
  //   {
  //     label: 'Orange',
  //     value: 'Orange',
  //   },
  // ]

  // pagination end
  return (
    <>
      <div className="asset__page">
        {loading ? (
          <div
            style={{
              display: 'flex',
              justifyContent: 'center',
              alignItems: 'center',
              zIndex: '1000',
              position: 'fixed',
              left: '750px',
              top: '350px',
            }}
          >
            <Spin size="large" style={{ fontSize: '30px' }} />
          </div>
        ) : (
          ''
        )}
        <div
          style={{
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
          }}
        >
          <p className="asset__management">Asset Management</p>
          <div
            style={{
              display: 'flex',
              alignItems: 'flex-start',
              cursor: 'pointer',
            }}
            onClick={() => refreshAssetPage()}
          >
            <img src={refresh} alt="edit" style={{ width: '15px', paddingTop: '5px' }} />
            <div style={{ display: 'flex', flexDirection: 'column' }}>
              <p className="asset_refresh">Refresh Data</p>

              <p style={{ fontSize: '11px', marginTop: '-13px' }}>Last fetched 2hours ago</p>
            </div>
          </div>
        </div>
        <div className="for_uploading">
          <div className="handle_filter_bar">
            <div className="mainDiv_assigned_unassigned">
              <button
                onClick={() => ButtonofAll()}
                //className="btn_of_assigned_All"
                className="btn1"
                style={
                  changBackgroundAll
                    ? {
                        backgroundColor: '#3A72DE',
                        color: '#fff',
                        backgroundImage: `url=(/)`,
                      }
                    : { backgroundColor: '#fff' }
                }
              >
                {changBackgroundAll ? (
                  <img src={check_sign} alt="edit" className="right_arrow" />
                ) : (
                  ''
                )}
                All
              </button>
              <button
                onClick={() => ButtonofAssigned()}
                //className="btn_of_assigned"
                className="btn_mid"
                style={
                  changBackgroundAssigned
                    ? { backgroundColor: '#3A72DE', color: '#fff' }
                    : { backgroundColor: '#fff' }
                }
              >
                {changBackgroundAssigned ? (
                  <img src={check_sign} alt="edit" className="right_arrow" />
                ) : (
                  ''
                )}
                Assigned
              </button>
              <button
                onClick={() => ButtonofUnassigned()}
                //className="unAssi_gned"
                className="btn3"
                style={
                  changBackgroundUnAssigned
                    ? { backgroundColor: '#3A72DE', color: '#fff' }
                    : { backgroundColor: '#fff' }
                }
              >
                {changBackgroundUnAssigned ? (
                  <img src={check_sign} alt="edit" className="right_arrow" />
                ) : (
                  ''
                )}
                Unassigned
              </button>
            </div>
          </div>

          <form onSubmit={handleSubmit}>
            <input ref={inputRef} accept=".csv" type="file" onChange={handleFileChange} required />
            <button
              className="import_report"
              style={bgColor ? { backgroundColor: '#1890ff' } : { backgroundColor: '#cc9ceb' }}
              type="submit"
            >
              Import CSV
              <img src={import_one} alt="edit" className="left_arrow" />
            </button>
          </form>
          <button onClick={importCSVFunc}>Click me</button>
        </div>
        <div className="">
          <div className="main_div">
            <div className="first_div" style={{ overflowX: 'auto' }}>
              <table className="tabel table-hover">
                <thead>
                  <tr className="asset__acount">
                    <th className="th_style">
                      <Radio></Radio>
                    </th>
                    <th className="th_style">Device ID</th>
                    <th className="th_style">Unique ID</th>
                    <th className="th_style">Device Address</th>
                    <th className="th_style">State</th>
                    <th className="th_style">ZIP</th>
                    <th className="th_style">Installation</th>
                    <th className="th_style">Partner</th>
                    <th className="th_style">Name</th>
                    <th className="th_style">Phone</th>
                    <th className="th_style">Email</th>
                    <th className="th_style">Unit State</th>
                    <th className="th_style">Status</th>
                    <th className="th_style">Assigned/UnAssigned</th>
                    <th className="th_style">Action</th>
                  </tr>
                </thead>
                <tbody style={{ backgroundColor: '#fff' }}>
                  {currentPosts &&
                    currentPosts.map((item, ind) => {
                      let IdForCurrentPost = item.id
                      let IdForCsvData
                      let nm
                      let partialMatchData
                      let loopingPartial
                      let allNum
                      return (
                        <tr key={ind} style={{ borderBottom: '0.5px solid #CAC4D0' }}>
                          <td className="td_style">
                            {item.flag_status === 1 ? <FlagTwoTone /> : ''}
                          </td>
                          <td className="td_style">{item.device_id}</td>
                          <td className="td_style">{item.unique_id}</td>
                          <td className={`td_style td_style_${ind}`}>
                            <Select
                              showSearch
                              style={{
                                width: 300,
                              }}
                              value={
                                item.device_address !== null
                                  ? item.device_address
                                  : `td_style_${ind}` === autoFillIndex
                                  ? selectedDeviceAddress
                                  : ''
                              }
                              placeholder="Search to Select"
                              optionFilterProp="children"
                              onChange={(value, e) => selectDeviceAddressFunction(value, ind, e)}
                              filterOption={(input, option) =>
                                (option?.label ?? '').includes(input)
                              }
                              // filterSort={(optionA, optionB) =>
                              //   (optionA?.label ?? '')
                              //     .toLowerCase()
                              //     .localeCompare((optionB?.label ?? '').toLowerCase())
                              // }
                              options={(deviceAddressOption || []).map((d) => ({
                                value: d.id,
                                label: `${d.device_address}  (${d.installation})`,
                              }))}
                              // optionFilter="label"
                            />
                          </td>

                          <td className={`td_style td_style_${ind}`}>
                            {`td_style_${ind}` === autoFillIndex
                              ? autoFillState
                              : item.device_state}
                          </td>
                          <td className={`td_style td_style_${ind}`}>
                            {`td_style_${ind}` === autoFillIndex ? autoFillZip : item.device_zip}
                          </td>
                          <td className={`td_style td_style_${ind}`}>
                            {`td_style_${ind}` === autoFillIndex
                              ? autoFillInstallation
                              : item.installation}
                          </td>
                          <td className={`td_style td_style_${ind}`}>
                            <select
                              id="option__value_Location"
                              style={{ width: '130px', padding: '2px' }}
                              onChange={(e) => handleChange(e, ind)}
                            >
                              <option value="">Select Partner</option>
                              <option>
                                {`td_style_${ind}` === autoFillIndex
                                  ? autoFillPartner
                                  : item.partner}
                              </option>
                            </select>
                          </td>

                          {csvData.map((itm, ind) => {
                            IdForCsvData = itm.device_address_id
                            nm = IdForCsvData === IdForCurrentPost ? itm.customer_name : ''
                          })}
                          {forDataOfPartial.map((itemes, ind) => {
                            loopingPartial = itemes.device_address_id
                            allNum = IdForCurrentPost === loopingPartial
                            console.log(allNum, 'allNum')
                          })}

                          <td className={`td_style td_style_${ind} ${addingClass}`}>
                            {forTrue && item.pwa_name === null && nm !== null ? (
                              csvData.map((itm, ind) => {
                                IdForCsvData = itm.device_address_id

                                nm = IdForCsvData === IdForCurrentPost ? itm.customer_name : ''

                                return (
                                  <div
                                    key={ind}
                                    className={` ${nm ? 'clickdata_yesm' : 'clickdata_nom'}`}
                                  >
                                    <Select
                                      showSearch
                                      style={{
                                        width: 150,
                                      }}
                                      value={
                                        nm !== ''
                                          ? nm
                                          : autoFillCustomerName !== null
                                          ? autoFillCustomerName
                                          : ''
                                      }
                                      placeholder="Search to Select"
                                      optionFilterProp="children"
                                      //onChange={(value, e) => selectCustomerName(value, ind, e)}
                                      filterOption={(input, option) =>
                                        (option?.label ?? '').includes(input)
                                      }
                                      filterSort={(optionA, optionB) =>
                                        (optionA?.label ?? '')
                                          .toLowerCase()
                                          .localeCompare((optionB?.label ?? '').toLowerCase())
                                      }
                                      options={(forDataOfPartial || []).map((d) => ({
                                        value: d.device_address_id,
                                        label: d.customer_name,
                                      }))}
                                    />
                                  </div>
                                )
                              })
                            ) : (
                              <div className={`${addingClass}`}>
                                <Select
                                  showSearch
                                  style={{
                                    width: 150,
                                  }}
                                  value={
                                    item.pwa_name !== null
                                      ? item.pwa_name
                                      : `td_style_${ind}` === autoFillIndex
                                      ? autoFillCustomerName
                                      : ''
                                  }
                                  placeholder="Search to Select"
                                  optionFilterProp="children"
                                  onChange={(value, e) => selectCustomerName(value, ind, e)}
                                  filterOption={(input, option) =>
                                    (option?.label ?? '').includes(input)
                                  }
                                  filterSort={(optionA, optionB) =>
                                    (optionA?.label ?? '')
                                      .toLowerCase()
                                      .localeCompare((optionB?.label ?? '').toLowerCase())
                                  }
                                  options={(loopingCustomerName || []).map((d) => ({
                                    value: d.id,
                                    label: d.pwa_name,
                                  }))}
                                />
                              </div>
                            )}
                          </td>
                          <td className={`td_style td_style_${ind}`}>
                            {`td_style_${ind}` === autoFillIndex
                              ? autoFillCustomerPhone
                              : item.pwa_mobile}
                          </td>
                          <td className={`td_style td_style_${ind}`}>
                            {`td_style_${ind}` === autoFillIndex
                              ? autoFillCustomerEmail
                              : item.pwa_email}
                          </td>
                          <td className={`td_style td_style_${ind}`}>
                            <Select
                              showSearch
                              placeholder="Select Unit State"
                              optionFilterProp="children"
                              onChange={(value, e) => onChange(value, ind, e)}
                              // onSearch={onSearch}
                              value={
                                `td_style_${ind}` === autoFillIndex
                                  ? autoFillCustomerUnitState
                                  : item.deviceunit_state
                              }
                              style={{
                                width: 150,
                              }}
                              filterOption={(input, option) =>
                                (option?.label ?? '').toLowerCase().includes(input.toLowerCase())
                              }
                              options={[
                                {
                                  value: 'Installed',
                                  label: 'Installed',
                                },
                                {
                                  value: 'Inventoried',
                                  label: 'Inventoried',
                                },
                                {
                                  value: 'DRMO',
                                  label: 'DRMO',
                                },
                                {
                                  value: 'Deployed',
                                  label: 'Deployed',
                                },
                              ]}
                            />
                          </td>
                          <td className={`td_style td_style_${ind}`}>
                            <Switch
                              size="small"
                              checked={
                                `td_style_${ind}` === autoFillIndex
                                  ? disabled
                                  : +item?.status === 1
                                  ? () => setDisabled(disabled)
                                  : ''
                              }
                              onChange={(value) => onChangeSwitch(value, ind, item.status)}
                            />
                          </td>
                          <td className={`td_style td_style_${ind}`}>
                            {item.status === 1 ? (
                              <button
                                style={{ border: 'none', background: 'none' }}
                                onClick={() => unAssignedData(item.id, item.cust_id)}
                              >
                                <UserAddOutlined size="large" style={{ color: 'green' }} />
                              </button>
                            ) : (
                              <button
                                style={{ border: 'none', background: 'none' }}
                                onClick={
                                  conditionAssigned === true
                                    ? () =>
                                        AssignedDataOnhandleSelect(
                                          item.id,
                                          item.device_id,
                                          item.unique_id,
                                        )
                                    : () =>
                                        AssignedDataOnMapMethod(
                                          item.id,
                                          item.device_id,
                                          item.unique_id,
                                          item.device_address,
                                          item.device_state,
                                          item.device_zip,
                                          item.installation,
                                          item.partner,
                                          item.cust_name,
                                          item.cust_phone,
                                          item.cust_email,
                                          item.deviceunit_state,
                                        )
                                }
                              >
                                <UserAddOutlined size="large" style={{ color: 'red' }} />
                              </button>
                            )}
                          </td>
                          <td className={`td_style td_style_${ind}`}>
                            <button
                              onClick={() => {
                                openDeleteModal(setId(item.id), setName(item.device_id))
                              }}
                              style={{ border: 'none', background: 'none' }}
                            >
                              <DeleteOutlined
                                style={{
                                  color: 'red',
                                  fontWeight: 'bolder',
                                  fontSize: '18px',
                                }}
                              />
                            </button>
                          </td>
                        </tr>
                      )
                    })}
                </tbody>
              </table>
            </div>
          </div>
        </div>
        <div
          className="user__detail__popup__Price"
          style={{
            display: userDelete ? 'block' : 'none',
          }}
        >
          <div style={{ display: 'flex', alignItems: 'center' }}>
            <DeleteOutlined
              style={{
                display: 'block',
                color: '#fff',
                fontWeight: 'bolder',
                paddingRight: '10px',
                marginTop: '-5px',
                fontSize: '18px',
              }}
            />
            <p className="admin_registerd__pop">Assets has been deleted.</p>
          </div>
        </div>
        <div
          className="show__notShow"
          style={{
            display: isAssetsDelete ? 'block' : 'none',
          }}
        >
          <div id="confirm__delete_location">
            <p>Confirm Delete</p>
          </div>
          <div id="delete__Location">
            <p>Are you sure you want to delete Device Id</p>
            <p style={{ marginTop: '-10px' }}>
              <span style={{ fontWeight: 'bolder' }}>{name}</span>
            </p>
            <p style={{ marginTop: '-10px' }}> This process is Irreversible</p>
            <div style={{ paddingLeft: '10px' }}>
              <button onClick={() => deleteAsseted(id)} type="submit" className="delete_new__admin">
                Delete
              </button>
              <button
                onClick={cancelDeleteAssets}
                className="cancel__create__location"
                type="submit"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
        <Pagination
          onChange={handlePaginationOfAssets}
          pageSize={postPerPage}
          total={total}
          current={page}
          showSizeChanger
          showQuickJumper
          onShowSizeChange={onShowSizeChange}
          itemRender={itemRender}
          style={{
            paddingLeft: '12px',
            display: 'flex',
            justifyContent: 'flex-start',
            marginTop: '10px',
          }}
        />
      </div>
    </>
  )
}

export default AssetTwo
